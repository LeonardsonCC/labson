services:
  # jellyfin is used to serve your media to the client devices
  jellyfin:
    image: lscr.io/linuxserver/${MEDIA_SERVICE}
    container_name: ${MEDIA_SERVICE}
    #network_mode: host # plex
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - VERSION=docker
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${MEDIA_DIRECTORY}:/data
      - ${INSTALL_DIRECTORY}/config/${MEDIA_SERVICE}:/config
    ports:
      # plex
      - 8096:8096 # plex
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.rule=Host(`jellyfin.lab.son`)
      - traefik.http.routers.jellyfin.entrypoints=websecure
      - traefik.http.routers.jellyfin.tls=true
    restart: unless-stopped
    networks:
      - proxy
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=America/Sao_Paulo
      # - PORT=5055 #optional
    ports:
      - 5055:5055
    volumes:
      - ${INSTALL_DIRECTORY}/config/jellyseer:/app/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyseerr.rule=Host(`jellyseerr.lab.son`)
      - traefik.http.routers.jellyseerr.entrypoints=websecure
      - traefik.http.routers.jellyseerr.tls=true
    networks:
      - proxy
    restart: unless-stopped
  # qBitorrent is used to download torrents
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:4.6.3
    container_name: qbittorrent
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - WEBUI_PORT=8081
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${MEDIA_DIRECTORY}:/data
      - ${INSTALL_DIRECTORY}/config/qbittorrent:/config
    restart: unless-stopped
    ports:
      # qbittorrent
      - 8081:8081 # qbittorrent
    labels:
      - traefik.enable=true
      - traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.lab.son`)
      - traefik.http.routers.qbittorrent.entrypoints=websecure
      - traefik.http.routers.qbittorrent.tls=true
    networks:
      - proxy
    #network_mode: "service:gluetun"

    # Sonarr is used to query, add downloads to the download queue and index TV shows
    # https://sonarr.tv/
  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${MEDIA_DIRECTORY}:/data
      - ${INSTALL_DIRECTORY}/config/sonarr:/config
    ports:
      - 8989:8989
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`sonarr.lab.son`)
      - traefik.http.routers.sonarr.entrypoints=websecure
      - traefik.http.routers.sonarr.tls=true
    restart: unless-stopped
    networks:
      - proxy
  # Radarr is used to query, add downloads to the download queue and index Movies
  # https://radarr.video/
  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${MEDIA_DIRECTORY}:/data
      - ${INSTALL_DIRECTORY}/config/radarr:/config
    ports:
      - 7878:7878
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host(`radarr.lab.son`)
      - traefik.http.routers.radarr.entrypoints=websecure
      - traefik.http.routers.radarr.tls=true
    networks:
      - proxy
  # Bazarr is used to download and categorize subtitles
  # https://www.bazarr.media/
  bazarr:
    image: lscr.io/linuxserver/bazarr
    container_name: bazarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${MEDIA_DIRECTORY}:/data
      - ${INSTALL_DIRECTORY}/config/bazarr:/config
    ports:
      - 6767:6767
    labels:
      - traefik.enable=true
      - traefik.http.routers.bazarr.rule=Host(`bazarr.lab.son`)
      - traefik.http.routers.bazarr.entrypoints=websecure
      - traefik.http.routers.bazarr.tls=true
    restart: unless-stopped
    networks:
      - proxy
  # Prowlarr is our torrent indexer/searcher. Sonarr/Radarr use Prowlarr as a source
  # https://prowlarr.com/
  prowlarr:
    image: lscr.io/linuxserver/prowlarr
    container_name: prowlarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${INSTALL_DIRECTORY}/config/prowlarr:/config
    ports:
      - 9696:9696
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.lab.son`)
      - traefik.http.routers.prowlarr.entrypoints=websecure
      - traefik.http.routers.prowlarr.tls=true
    restart: unless-stopped
    networks:
      - proxy
  # Gluetun is our VPN, so you can download torrents safely
  #gluetun:
  #  image: qmcgaw/gluetun:v3
  #  container_name: gluetun
  #  cap_add:
  #    - NET_ADMIN
  #  devices:
  #    - /dev/net/tun:/dev/net/tun
  #  ports:
  #    - 8889:8888/tcp # HTTP proxy
  #    - 8388:8388/tcp # Shadowsocks
  #    - 8388:8388/udp # Shadowsocks
  #    - 8003:8000/tcp # Admin
  #    #- 8080:8080/tcp # gluetun
  #    #- 8081:8081/tcp # gluetun
  #  environment:
  #
  #    - VPN_SERVICE_PROVIDER=${VPN_SERVICE}
  #    - VPN_TYPE=openvpn
  #    - OPENVPN_USER=${VPN_USER}
  #    - OPENVPN_PASSWORD=${VPN_PASSWORD}
  #    - OPENVPN_CIPHERS=AES-256-GCM
  #    - PORT_FORWARD_ONLY=on
  #    - VPN_PORT_FORWARDING=on
  #  restart: unless-stopped
  #  networks:
  #    - proxy
  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - AUTO_UPDATE=true #optional
      - RUN_OPTS= #optional
    volumes:
      - ${INSTALL_DIRECTORY}/config/jackett:/config
      - ${MEDIA_DIRECTORY}:/downloads
    ports:
      - 9117:9117
    labels:
      - traefik.enable=true
      - traefik.http.routers.jackett.rule=Host(`jackett.lab.son`)
      - traefik.http.routers.jackett.entrypoints=websecure
      - traefik.http.routers.jackett.tls=true
    restart: unless-stopped
    networks:
      - proxy
  flaresolverr:
    image: ghcr.io/thephaseless/byparr:latest
    container_name: flaresolverr
    ports:
      - 8191:8191
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.flaresolverr.rule=Host(`flaresolverr.lab.son`)
      - traefik.http.routers.flaresolverr.entrypoints=websecure
      - traefik.http.routers.flaresolverr.tls=true
    networks:
      - proxy
networks:
  proxy:
    external: true
